{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to GarudaNvim"},{"location":"#introduction","title":"Introduction","text":"<p>Reimagining how you code!</p> <p>GarudaNvim \u2013 the Neovim configuration you didn\u2019t know you needed, but now you\u2019ll wonder how you ever lived without it. Say goodbye to excessive mouse-clicking and embrace the Zen of keyboard-powered coding.</p> <p>In the Hindu mythology, Garuda is more than just a mythical creature \u2014 it\u2019s a symbol of speed, precision, and freedom. Often depicted as a powerful eagle soaring high above, Garuda is known for its ability to cover vast distances swiftly, with unwavering focus.</p> <p>Inspired by the legendary speed, agility and swiftness of Garuda (and, let\u2019s face it, our collective disdain for reaching for the mouse every five seconds), the configuration helps you code faster and navigate seamlessly. Fly through the code like Garuda through the skies!</p> <p>Here's what we have got for you!</p>"},{"location":"#why-garudanvim","title":"Why GarudaNvim?","text":"<p>It\u2019s simple: speed, agility, and an obsession with keyboard shortcuts.</p> <ul> <li>Keyboard-Centric: Almost everything can be done from the keyboard (why use a mouse to decrease productivity), for that true coder-on-the-go experience.</li> <li>Powerful Keymaps: We believe that every key has a purpose (like your mistakes\u2026 just kidding!). A thoughtfully crafted keymap system that enhances your productivity.</li> <li>Cross-Platform: Optimized for macOS and Linux. Sorry Windows fans, maybe someday. \ud83d\ude09</li> </ul> <p>With GarudaNvim, get ready to code faster, customize deeper, and maybe even impress your colleagues (and partner!) with how rarely you reach for the mouse.</p> <p>Checkout the Features section for more info.</p> <p>Ready To Install? Click here</p>"},{"location":"#vision","title":"Vision","text":"<p>Imagine a world where configuring your editor doesn\u2019t feel like defusing a bomb. GarudaNvim\u2019s mission is to bring you a robust, ready-to-go Neovim setup that\u2019s customizable, lightweight, and fast enough to rival even the fanciest GUI editors. Whether you\u2019re a seasoned Vim wizard or a Neovim newcomer, GarudaNvim provides the tools and configurations needed for an exceptional coding experience.</p> <p>GarudaNvim isn\u2019t just a Neovim config \u2013 it\u2019s a philosophy. It\u2019s about coding smarter, moving faster, and finding joy in a highly customized, optimized setup that grows with you.</p>"},{"location":"#latest-version-v130","title":"Latest Version: v1.3.0","text":"<p>Yes, we keep it fresh! GarudaNvim v1.3.0 is out with some amazing udpates:</p> <ul> <li>New Features:<ul> <li>Streamlined keybindings with WhichKey</li> <li>Versatile Terminal Management with ToggleTerm</li> <li>Enhanced git functionality with Lazygit</li> <li>Visual git tracking with Gitsigns</li> <li>Intelligent new Installer</li> <li>More Colorschemes so that no one feels left out</li> </ul> </li> <li>Where to Find It: GarudaNvim Releases</li> </ul> <p>Because let's be honest \u2013 you didn\u2019t really want to write all those colorscheme lines yourself, did you?</p>"},{"location":"#support-us","title":"Support Us","text":"<p>If GarudaNvim has saved you from a dozen mouse-induced wrist injuries, consider giving it a star \u2b50 on GitHub! It\u2019s a small click for you, but it means the world to us.</p> <p>And if you\u2019re feeling extra generous, you can sponsor the project. Your support helps us keep GarudaNvim soaring with updates, bug fixes, and even more keymaps for your coding delight.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Big thanks to Neovim for making terminal-based coding awesome (and for the endless possibilities of <code>:q!</code>). And to the creators of all the plugins we rely on \u2013 we owe you a whole lot of coffees and an embarrassing number of pull requests.</p>"},{"location":"#last-words","title":"Last Words...","text":"<p>Happy Coding with GarudaNvim \ud83d\udcbb  Welcome to the Cult (umm, I meant Club :P)</p> <p>P.S. \u2013 This project is the brainchild of Priyanshu Ranjan, a final-year student at IIT Kharagpur, and he\u2019s poured his heart (and far too many late-night hours) into it.</p> Next Installation \u27a1\ufe0f"},{"location":"codeofconduct/","title":"Code of Conduct","text":"Code of Conduct <p>Welcome to the GarudaNvim community! We\u2019re here to build, learn, and support each other in the pursuit of better Neovim experiences. By participating, you agree to abide by the following guidelines. Think of this as a mutual pact for keeping our space welcoming, inclusive, and just a bit easier to navigate\u2014like a well-written config file.</p>"},{"location":"codeofconduct/#be-respectful","title":"Be Respectful","text":"<p>Treat everyone here with respect. Behind every code snippet is a real person with their own journey\u2014kindness goes a long way.</p>"},{"location":"codeofconduct/#constructive-feedback-only","title":"Constructive Feedback Only","text":"<p>If you spot an improvement, share it kindly. \u201cHere\u2019s a tweak that could make this faster\u201d &gt; \u201cThis is awful.\u201d Positive language helps us all grow.</p>"},{"location":"codeofconduct/#help-beginners-patiently","title":"Help Beginners, Patiently","text":"<p>Not everyone is a Neovim wizard (yet). Remember when you learned to exit Vim for the first time? Exactly. Patience is key.</p>"},{"location":"codeofconduct/#stay-on-topic-but-keep-it-light","title":"Stay on Topic, but Keep it Light","text":"<p>This community is about GarudaNvim and its ecosystem. Off-topic discussions belong elsewhere. A little humor is welcome, but let\u2019s avoid unrelated tangents.</p>"},{"location":"codeofconduct/#healthy-debates-no-flame-wars","title":"Healthy Debates, No Flame Wars","text":"<p>Opinions vary, and that\u2019s okay. Debate ideas, not people. A healthy discussion is great; a heated argument? Not so much.</p>"},{"location":"codeofconduct/#keep-the-community-organized","title":"Keep the Community Organized","text":"<p>Use appropriate channels for bug reports, discussions, and feedback. It helps everyone find what they need faster.</p>"},{"location":"codeofconduct/#avoid-self-promotion","title":"Avoid Self-Promotion","text":"<p>Have something cool to share? Awesome. But if it feels like an ad or an infomercial, maybe think twice. We\u2019re here for code, not commercials.</p>"},{"location":"codeofconduct/#celebrate-all-wins","title":"Celebrate All Wins","text":"<p>Managed to configure a plugin after hours of tweaking? Share it! Big or small, every win is worth celebrating in coding.</p>"},{"location":"codeofconduct/#respect-privacy","title":"Respect Privacy","text":"<p>Avoid sending unsolicited messages or prying into private information. Everyone deserves their space online, too.</p>"},{"location":"codeofconduct/#english-please","title":"English, Please","text":"<p>Code is a universal language, but discussion is not. Stick to English so that everyone can follow along.</p>"},{"location":"codeofconduct/#report-issues-responsibly","title":"Report Issues Responsibly","text":"<p>If you notice behavior that doesn\u2019t align with these guidelines, let us know. We\u2019re here to keep this community a safe space.</p>"},{"location":"codeofconduct/#remember-contributions-are-voluntary","title":"Remember: Contributions are Voluntary","text":"<p>Every pull request, issue resolved, and answer shared is voluntary. Respect everyone\u2019s time and efforts, whether you agree with them or not.</p> <p>Note : By participating, you're helping to make GarudaNvim a better space for all of us. Thank you for following the Code of Conduct and being a part of our community!</p> \u2b05\ufe0f Previous Releases"},{"location":"features/","title":"Features","text":"Features of GarudaNvim <p>GarudaNvim is more than just another Neovim setup \u2013 it\u2019s a finely tuned machine built for those who want to code, not configure. From productivity-boosting keymaps to eye-pleasing themes, GarudaNvim takes Neovim to new heights. Dive in to see what makes it tick:</p>"},{"location":"features/#effortless-installation","title":"Effortless Installation","text":"<ul> <li>Automatic Setup, Minimal Hassle: Our installer handles everything from OS detection to plugin setup, leaving you more time to focus on your code and less time wondering why things don\u2019t work.</li> <li>Cross-Platform Magic: Whether you\u2019re on macOS or Linux, GarudaNvim's installer is as compatible as the most versatile coder. One run, and it\u2019s all set up \u2013 no more wrestling with dependencies.</li> </ul>"},{"location":"features/#productivity-powerhouse","title":"Productivity Powerhouse","text":"<ul> <li>Shortcut Wizardry: With GarudaNvim\u2019s custom keymaps, you\u2019ll forget what \u201cslow\u201d feels like. Jump between files, split windows, resize buffers \u2013 it\u2019s all a keystroke away. Less typing, more coding.</li> <li>Which-Key Guidance: With Which-Key as your guide, every possible keybinding is right at your fingertips. No more  + ??? guessing games \u2013 just press, discover, and power up."},{"location":"features/#enhanced-navigation","title":"Enhanced Navigation","text":"<ul> <li>Telescope for Search-Anything: Need to find a file, buffer, or command? Telescope integration lets you glide through your project faster than a Ctrl+F on steroids. Say goodbye to scrolling aimlessly.</li> <li>NvimTree for File Management: A built-in, intuitive file explorer keeps all your files accessible with a simple shortcut. Navigate like a pro without ever leaving Neovim\u2019s window.</li> </ul>"},{"location":"features/#customizable-ui-elements","title":"Customizable UI Elements","text":"<ul> <li>Polished Status and Tab Lines: With Lualine for the statusline and Barbar for the tabline, you get a sleek, customizable interface that keeps tabs on your workflow without becoming a cluttered mess.</li> <li>Eye-Friendly Highlights: Each highlight color and cursorline has been meticulously chosen to ensure comfort, visibility, and minimal eye strain \u2013 because staring at code all day is already hard enough.</li> </ul>"},{"location":"features/#multiple-themes-built-in","title":"Multiple Themes Built In","text":"<ul> <li>Color Schemes for Every Mood: With options like Tokyo Night, Nordic, Dracula, Catppuccin, and more, you can match your Neovim vibes with your monitor brightness (or your mood, no judgment here).</li> <li>Light and Dark Mode Toggle: A single command flips the theme, so you can go from night owl to daylight coder without skipping a beat.</li> </ul>"},{"location":"features/#seamless-plugin-management","title":"Seamless Plugin Management","text":"<ul> <li>Lazy for Effortless Plugin Control: Why \u201cinstall manually\u201d when you can \u201cinstall lazily\u201d? With the Lazy plugin manager, adding, updating, or removing plugins is as effortless as a lazy Sunday.</li> <li>Curated Essentials: Hand-picked plugins for maximum productivity \u2013 from Onedarkpro for a pleasing default theme to Telescope for instant file searching. Only the best make the cut.</li> </ul>"},{"location":"features/#minimal-yet-expandable","title":"Minimal Yet Expandable","text":"<ul> <li>Core Setup, Endless Potential: GarudaNvim starts minimal so you can build up as needed. Want a bare-bones environment? Done. Want to add your own collection of plugins and tweak everything? Go wild.</li> <li>Easy Customization: Adjust options, add new plugins, or play around with settings without having to unearth cryptic files. The setup is designed to be as flexible as a Neovim enthusiast\u2019s ideal config.</li> </ul>"},{"location":"features/#detailed-documentation","title":"Detailed Documentation","text":"<ul> <li>Knowledge At Your Fingertips: Whether you\u2019re a Neovim newbie or a seasoned coder, the GarudaNvim Docs cover everything you need to know, from installation to mastering every shortcut. No need to trawl forums for answers.</li> <li>Example-Rich Explanations: Real examples, quick tips, and straightforward instructions ensure that you spend more time coding and less time deciphering docs.</li> </ul>"},{"location":"features/#updates-and-feedback","title":"Updates and Feedback","text":"<ul> <li>Constant Updates and Improvements: GarudaNvim is a passion project by Priyanshu Ranjan, supported by a growing community of Neovim enthusiasts. Expect regular improvements, fresh features, and feedback-driven updates.</li> <li>Built by Coders, for Coders: GarudaNvim grows with the feedback of real-world usage, so everything here is designed with developers' needs in mind.</li> </ul> <p>Take GarudaNvim for a spin, and you\u2019ll see \u2013 it\u2019s the Neovim setup you didn\u2019t know you needed. It\u2019s efficient, it\u2019s powerful, and yes, it\u2019s a bit sarcastic. But when you\u2019re coding at warp speed, you\u2019ll get it.</p> \u2b05\ufe0f Previous Installation Next Plugins \u27a1\ufe0f"},{"location":"installation/","title":"Installation","text":"Installation <p>Installing GarudaNvim is a breeze. Follow the steps below to get GarudaNvim up and running on your machine.</p>"},{"location":"installation/#installation-command","title":"Installation Command","text":"<p>Run the following command to install GarudaNvim on your system:</p> <pre><code>LATEST=$(curl -s https://api.github.com/repos/GarudaNvim/Installer/releases/latest | grep '\"tag_name\"' | cut -d '\"' -f 4)\nwget -q https://raw.githubusercontent.com/GarudaNvim/Installer/$LATEST/installGarudaNvim.sh\nchmod +x installGarudaNvim.sh &amp;&amp; { ./installGarudaNvim.sh } || { echo }\nrm -f installGarudaNvim.sh\n</code></pre> <p></p>"},{"location":"installation/#uninstallation","title":"Uninstallation","text":"<p>To uninstall GarudaNvim, use the command below:</p> <p><pre><code>LATEST=$(curl -s https://api.github.com/repos/GarudaNvim/Installer/releases/latest | grep '\"tag_name\"' | cut -d '\"' -f 4)\nwget -q https://raw.githubusercontent.com/GarudaNvim/Installer/$LATEST/uninstallGarudaNvim.sh\nchmod +x uninstallGarudaNvim.sh &amp;&amp; { ./uninstallGarudaNvim.sh } || { echo }\nrm -f uninstallGarudaNvim.sh\n</code></pre> </p> <p>For more information on the script used for Installation (and Uninstallation), checkout our Installer Repo</p> \u2b05\ufe0f Previous Home Next Features \u27a1\ufe0f"},{"location":"keymaps/","title":"Keymaps","text":"Keymaps <p>Welcome to the land of keymaps, where every keystroke counts, and Neovim becomes your playground. We know you're here because you're tired of typing the same old commands a thousand times a day. Well, you've come to the right place! With GarudaNvim's custom keymaps, we\u2019re putting your fingers on the fast lane to efficiency. But before you start flying through your code, remember: with great power comes great responsibility. Use these keybindings wisely, or you might just get too lazy to use the mouse again. No pressure, though.</p> <p>Also, don't forget that this is just the beginning. After mastering these, head over to the which-key page\u2014our beloved menu of shortcuts. Trust us, it\u2019ll make you feel like a coding ninja, minus the actual ninja suit.*</p>"},{"location":"keymaps/#neovim-modes","title":"Neovim Modes","text":"<ul> <li>Normal Mode (<code>n</code>): The default mode for most actions, like navigating, editing, and breaking stuff (whoops).</li> <li>Insert Mode (<code>i</code>): Where you go when you need to type things (or mess up an entire file).</li> <li>Visual Mode (<code>v</code>): Selecting text to either copy, delete, or wonder why you selected it in the first place.</li> <li>Visual Block Mode (<code>x</code>): For when you need to select columns of text and feel like you're hacking the matrix.</li> <li>Terminal Mode (<code>t</code>): The mode where you're constantly reminded that a terminal lives inside Neovim. Trippy, right?</li> <li>Command Mode (<code>c</code>): Where you talk to Neovim. Or maybe yell at it. No judgment.</li> </ul>"},{"location":"keymaps/#general-setup","title":"General Setup","text":"<ul> <li>Leader Key: GarudaNvim uses the space bar (<code>&lt;Space&gt;</code>) as the leader key. It\u2019s the most powerful key on your keyboard now, so treat it with respect. Here's how it's mapped:     <pre><code>map(\"\", \"&lt;Space&gt;\", \"&lt;Nop&gt;\", opts)\nvim.g.mapleader = \" \"\nvim.g.maplocalleader = \" \"\n</code></pre></li> </ul>"},{"location":"keymaps/#keymaps-in-normal-mode","title":"Keymaps in Normal Mode","text":"<p>Welcome to normal mode, where the magic happens, and where most of your day will be spent.</p> <ul> <li> <p>Better Window Navigation: Say goodbye to confusing window setups. Move between windows with ease.</p> <ul> <li><code>&lt;C-h&gt;</code>: Move to the window on the left.</li> <li><code>&lt;C-j&gt;</code>: Move to the window below.</li> <li><code>&lt;C-k&gt;</code>: Move to the window above.</li> <li><code>&lt;C-l&gt;</code>: Move to the window on the right. <pre><code>map(\"n\", \"&lt;C-h&gt;\", \"&lt;C-w&gt;h\", opts)\n</code></pre></li> </ul> </li> <li> <p>Resize Windows: Windows need resizing? No problem.</p> <ul> <li><code>&lt;C-q&gt;</code>: Decrease window height.</li> <li><code>&lt;C-w&gt;</code>: Increase window height.</li> <li><code>&lt;C-a&gt;</code>: Decrease window width.</li> <li><code>&lt;C-s&gt;</code>: Increase window width. <pre><code>map(\"n\", \"&lt;C-q&gt;\", \":resize -1&lt;CR&gt;\", opts)\n</code></pre></li> </ul> </li> <li> <p>Navigate Buffers: Cycle through your open buffers like a pro.</p> <ul> <li><code>&lt;S-l&gt;</code>: Move to the next buffer.</li> <li><code>&lt;S-h&gt;</code>: Move to the previous buffer. <pre><code>map(\"n\", \"&lt;S-l&gt;\", \":BufferNext&lt;CR&gt;\", opts)\n</code></pre></li> </ul> </li> <li> <p>Move Buffers: Reorganize your buffers in style.</p> <ul> <li><code>&lt;S-i&gt;</code>: Move the current buffer to the right.</li> <li><code>&lt;S-u&gt;</code>: Move the current buffer to the left. <pre><code>map(\"n\", \"&lt;S-i&gt;\", \":BufferMoveNext&lt;CR&gt;\", opts)\n</code></pre></li> </ul> </li> <li> <p>Move Text Up and Down: Because who needs to retype lines?</p> <ul> <li><code>&lt;S-j&gt;</code>: Move the current line down.</li> <li><code>&lt;S-k&gt;</code>: Move the current line up. <pre><code>map(\"n\", \"&lt;S-j&gt;\", \"&lt;Esc&gt;:m .+1&lt;CR&gt;==gi\", opts)\n</code></pre></li> </ul> </li> <li> <p>Quick Actions: Be the action hero of your Neovim setup.</p> <ul> <li><code>&lt;Esc&gt;</code> or <code>q</code>: Clear search highlights. </li> <li><code>&lt;C-c&gt;</code>: Copy the entire file content to the system clipboard. </li> <li><code>d</code>: Delete without yanking (yes, you can safely delete now).</li> <li><code>&lt;Space&gt;e</code>: Toggle the NvimTree file explorer.  <pre><code>map(\"n\", \"&lt;C-c&gt;\", \"&lt;cmd&gt; %y+ &lt;CR&gt;&lt;CR&gt;\", opts)\n</code></pre></li> </ul> </li> <li> <p>Go to Beginning and End of Line: Quick shortcuts for lazy cursor movers.</p> <ul> <li><code>&lt;C-i&gt;</code>: Go to the beginning of the line.</li> <li><code>&lt;C-j&gt;</code>: Go to the end of the line. <pre><code>map(\"n\", \"&lt;C-i&gt;\", \"0\", opts)\n</code></pre></li> </ul> </li> </ul>"},{"location":"keymaps/#keymaps-in-insert-mode","title":"Keymaps in Insert Mode","text":"<p>Insert mode: for the brave, the bold, and those who actually need to type things.</p> <ul> <li> <p>Exit Insert Mode: Exit insert mode with the magic of <code>kj</code>. No more <code>Esc</code> key reaching!     <pre><code>map(\"i\", \"kj\", \"&lt;ESC&gt;\", opts)\n</code></pre></p> </li> <li> <p>Move Within Insert Mode: Navigate around while still in insert mode (yes, it's as cool as it sounds).</p> <ul> <li><code>&lt;C-h&gt;</code>: Move left.</li> <li><code>&lt;C-l&gt;</code>: Move right.</li> <li><code>&lt;C-j&gt;</code>: Move down.</li> <li><code>&lt;C-k&gt;</code>: Move up. <pre><code>map(\"i\", \"&lt;C-h&gt;\", \"&lt;Left&gt;\", opts)\n</code></pre></li> </ul> </li> <li> <p>Go to Beginning and End of Line: Quick shortcuts for lazy cursor movers inside insert mode.</p> <ul> <li><code>&lt;C-i&gt;</code>: Go to the beginning of the line.</li> <li><code>&lt;C-j&gt;</code>: Go to the end of the line. <pre><code>map(\"i\", \"&lt;C-i&gt;\", \"&lt;ESC&gt;^i\", opts) -- beginning of line\n</code></pre></li> </ul> </li> </ul>"},{"location":"keymaps/#keymaps-in-visual-mode","title":"Keymaps in Visual Mode","text":"<p>Visual mode: where selection happens, and text manipulation gets real.</p> <ul> <li> <p>Indenting While Staying in Visual Mode: Keep your selection while indenting. Handy, right?</p> <ul> <li><code>&lt;</code>: Indents your selected line to the left</li> <li><code>&gt;</code>: Indents your selected line to the right <pre><code>map(\"v\", \"&lt;\", \"&lt;gv\", opts)\n</code></pre></li> </ul> </li> <li> <p>Move Text: Shift selected text up or down without losing your mind.</p> <ul> <li><code>&lt;S-j&gt;</code>: Move selected text down.</li> <li><code>&lt;S-k&gt;</code>: Move selected text up. <pre><code>map(\"v\", \"&lt;S-j&gt;\", \":m .+1&lt;CR&gt;==\", opts)\n</code></pre></li> </ul> </li> <li> <p>Pasting Over Text: Paste over text without yanking it to the void.     <pre><code>map(\"v\", \"p\", '\"_dP', opts)\n</code></pre></p> </li> <li> <p>Replacement of Texts: Replaces the selected text via <code>&lt;C-r&gt;</code> with a prompt for the new text (global, with confirmation for each instance).     <pre><code>map(\"v\", \"&lt;C-r&gt;\", '\"hy:%s/&lt;C-r&gt;h//gc&lt;left&gt;&lt;left&gt;&lt;left&gt;', opts)\n</code></pre></p> </li> </ul>"},{"location":"keymaps/#keymaps-in-visual-block-mode","title":"Keymaps in Visual Block Mode","text":"<p>For when you need to manipulate columns of text like a true hacker.</p> <ul> <li>Move Block of Text: Push blocks of text around like it's no big deal.<ul> <li><code>J</code>: Move the block down.</li> <li><code>K</code>: Move the block up. <pre><code>map(\"x\", \"J\", \":move '&gt;+1&lt;CR&gt;gv-gv\", opts)\n</code></pre></li> </ul> </li> </ul>"},{"location":"keymaps/#additional-customization","title":"Additional Customization","text":"<p>GarudaNvim allows you to modify or extend these keymaps based on your workflow. We believe in the power of personalization. If these aren\u2019t enough, feel free to dive into the <code>keymaps.lua</code> file and add more.</p> \u2b05\ufe0f Previous Plugins Next Which-Key \u27a1\ufe0f"},{"location":"plugins/","title":"Plugins","text":"Plugins <p>GarudaNvim comes pre-installed with a range of powerful plugins to maximize productivity, enhance workflow, and streamline your Neovim experience. Below is a list of the most important plugins included in GarudaNvim, ranked by their significance.</p>"},{"location":"plugins/#1-nvim-treelua","title":"1. nvim-tree.lua","text":"<p>File Explorer</p> <p>Repository: nvim-tree/nvim-tree.lua A highly efficient file explorer that integrates seamlessly into GarudaNvim. With nvim-tree, you can navigate your project files and directories quickly, making file management much easier. It's designed to be fast and responsive, perfect for keyboard-based navigation.</p>"},{"location":"plugins/#2-telescopenvim","title":"2. telescope.nvim","text":"<p>Fuzzy Finder</p> <p>Repository: nvim-telescope/telescope.nvim Telescope is a flexible and feature-rich fuzzy finder. It allows you to quickly search and open files, buffers, and even grep through your codebase. With powerful integrations, it\u2019s your go-to tool for locating anything in your project.</p>"},{"location":"plugins/#3-barbarnvim","title":"3. barbar.nvim","text":"<p>Tabline</p> <p>Repository: romgrk/barbar.nvim Barbar provides a sleek tabline that allows easy navigation between buffers in GarudaNvim. Its design complements the overall interface, making buffer management intuitive and visually appealing.</p>"},{"location":"plugins/#4-lualinenvim","title":"4. lualine.nvim","text":"<p>Statusline</p> <p>Repository: nvim-lualine/lualine.nvim Lualine is a fast, lightweight statusline plugin for GarudaNvim, offering flexibility in customizing the appearance of the statusline. It displays essential information like file type, encoding, and current git branch.</p>"},{"location":"plugins/#5-alpha-nvim","title":"5. alpha-nvim","text":"<p>Dashboard</p> <p>Repository: goolord/alpha-nvim Alpha provides a customizable dashboard that appears when you start GarudaNvim. You can configure it with shortcuts, recent files, and other useful information, making it a perfect landing page for your workflow.</p>"},{"location":"plugins/#6-projectnvim","title":"6. project.nvim","text":"<p>Project Management</p> <p>Repository: ahmedkhalf/project.nvim This plugin helps manage and quickly switch between different projects on your machine. It offers an easy way to organize workspaces, providing instant access to your project files.</p>"},{"location":"plugins/#7-which-keynvim","title":"7. which-key.nvim","text":"<p>Keybinding Helper</p> <p>Repository: folke/which-key.nvim Which-key helps you learn and remember keybindings by displaying available key mappings as you type. It's an excellent tool for discovering new shortcuts and enhancing your keyboard-driven workflow.</p>"},{"location":"plugins/#8-gitsignsnvim","title":"8. gitsigns.nvim","text":"<p>Git Integration</p> <p>Repository: lewis6991/gitsigns.nvim Gitsigns displays git status indicators in the sign column, allowing you to view changes to files, stages, and commits directly in GarudaNvim. It enhances the GarudaNvim experience by integrating git-related information seamlessly.</p>"},{"location":"plugins/#9-toggletermnvim","title":"9. toggleterm.nvim","text":"<p>Terminal Management</p> <p>Repository: akinsho/toggleterm.nvim Toggleterm makes managing multiple terminal instances within GarudaNvim easy. It allows you to create and toggle between terminals, providing a seamless terminal experience inside your editor.</p>"},{"location":"plugins/#10-lazygitnvim","title":"10. lazygit.nvim","text":"<p>Git Interface</p> <p>Repository: kdheepak/lazygit.nvim This plugin integrates the popular LazyGit terminal UI into GarudaNvim, enabling you to manage git repositories with a visual interface. It simplifies complex git operations while keeping you inside GarudaNvim.</p>"},{"location":"plugins/#11-nvim-web-devicons","title":"11. nvim-web-devicons","text":"<p>File Icons</p> <p>Repository: nvim-tree/nvim-web-devicons Nvim-web-devicons provides file icons that enhance the appearance of various plugins such as nvim-tree, barbar, and lualine. It improves visual navigation by using icons to represent different file types.</p>"},{"location":"plugins/#12-telescope-ui-selectnvim","title":"12. telescope-ui-select.nvim","text":"<p>UI Select Integration</p> <p>Repository: nvim-telescope/telescope-ui-select.nvim This plugin extends telescope by integrating with Neovim\u2019s <code>vim.ui.select()</code> function, replacing default UI selections with a more powerful, fuzzy-searchable menu.</p>"},{"location":"plugins/#13-telescope-live-grep-argsnvim","title":"13. telescope-live-grep-args.nvim","text":"<p>Grep with Arguments</p> <p>Repository: nvim-telescope/telescope-live-grep-args.nvim Telescope-live-grep-args allows you to pass arguments to <code>live_grep</code>, providing enhanced search capabilities within your project files. It offers flexibility in customizing search queries.</p>"},{"location":"plugins/#14-plenarynvim","title":"14. plenary.nvim","text":"<p>Utility Library</p> <p>Repository: nvim-lua/plenary.nvim Plenary is a library of common utilities used by many GarudaNvim plugins. It provides essential functions such as asynchronous programming support and file manipulation utilities, making plugin development easier.</p> <p>These plugins collectively enhance the functionality and workflow in GarudaNvim, making it a highly efficient and customizable Neovim distribution.</p> \u2b05\ufe0f Previous Features Next Keymaps \u27a1\ufe0f"},{"location":"releases/","title":"Releases","text":"Releases <p>GarudaNvim continuously evolves with each update, refining features, squashing bugs, and adding tools to make your Neovim experience smoother and more efficient. As a Neovim distribution designed for code and keyboard enthusiasts, GarudaNvim receives regular updates that improve performance, introduce new plugins, and enhance the user interface, allowing coders to be more productive and enjoy coding even more.</p> <p>Below, you\u2019ll find details on our current and previous releases, including version numbers, release dates, new features, and links to each update. Each release strives to bring GarudaNvim closer to the needs of developers who value simplicity, speed, and robust functionality.</p>"},{"location":"releases/#current-release","title":"Current Release","text":""},{"location":"releases/#version-130","title":"Version: 1.3.0","text":"<ul> <li>Release Date: November 1, 2024</li> <li>Features:<ul> <li>Streamlined keybindings with WhichKey</li> <li>Versatile Terminal Management with ToggleTerm</li> <li>Enhanced git functionality with Lazygit</li> <li>Visual git tracking with Gitsigns</li> <li>Intelligent new Installer</li> <li>More Colorschemes so that no one feels left out</li> </ul> </li> <li>Link: GarudaNvim v1.3.0 Release Notes</li> </ul>"},{"location":"releases/#past-releases","title":"Past Releases","text":""},{"location":"releases/#version-120","title":"Version: 1.2.0","text":"<ul> <li>Release Date: October 19, 2024</li> <li>Features:<ul> <li>Fuzzy finder with Telescope plugin</li> <li>Simplified project management with Project.nvim</li> <li>Dashboard screen with Alpha.nvim</li> <li>New Colorscheme options for users</li> </ul> </li> <li>Link: GarudaNvim v1.2.0 Release Notes</li> </ul>"},{"location":"releases/#version-110","title":"Version: 1.1.0","text":"<ul> <li>Release Date: October 13, 2024</li> <li>Features:<ul> <li>New Colorscheme plugins added</li> <li>Updated Default colorscheme to better suit the user's needs</li> <li>Better tab and buffer management with Barbar.nvim</li> <li>Sleek and informative statusline with Lualine.nvim</li> </ul> </li> <li>Link: GarudaNvim v1.1.0 Release Notes</li> </ul>"},{"location":"releases/#version-100","title":"Version: 1.0.0","text":"<ul> <li>Release Date: October 11, 2024</li> <li>Features:<ul> <li>Extended OS support for Linux Distributions</li> <li>Hassle free plugin installation with Lazy plugin manager</li> <li>Enhanced file exploration with NvimTree</li> <li>Set the Onedarkpro theme as default colorscheme</li> <li>Custom keymaps for streamlined navigation and code editing.</li> <li>Reorganized Folder structure</li> <li>Readme updated</li> </ul> </li> <li>Link: GarudaNvim v1.0.0 Release Notes</li> </ul>"},{"location":"releases/#version-020","title":"Version: 0.2.0","text":"<ul> <li>Release Date: October 7, 2024</li> <li>Features:<ul> <li>Clener Folder Structure</li> <li>Core GarudaNvim Settings with Options.lua file</li> </ul> </li> <li>Link: GarudaNvim v0.2.0 Release Notes</li> </ul>"},{"location":"releases/#version-010-initial-release","title":"Version: 0.1.0 - Initial Release","text":"<ul> <li>Release Date: October 4, 2024</li> <li>Features:<ul> <li>Automated Installer Script</li> <li>Intuitive keybindings with Keymaps.lua file</li> </ul> </li> <li>Link: GarudaNvim v0.1.0 Release Notes</li> </ul> <p>Keep an eye on this page for more updates, as GarudaNvim continues to roll out enhancements and new features with each release!</p> \u2b05\ufe0f Previous Themes Next Code of Conduct \u27a1\ufe0f"},{"location":"themes/","title":"Themes","text":"Themes <p>We know what a good colorscheme can do! It is soothing.  It can make you happy if you are sad and happier if you are already happy :)  GarudaNvim allows you to seamlessly switch themes and customize the look of your editor.</p>"},{"location":"themes/#default-theme","title":"Default Theme","text":"<p>Onedarkpro: A sleek dark theme that enhances code visibility.</p> <p>Note - Selected and configured by the author. Feel free to change it at <code>~/.config/nvim/lua/graudanvim/plugin_config/color_config/init.lua</code></p>"},{"location":"themes/#available-themes","title":"Available Themes","text":""},{"location":"themes/#pre-installed","title":"Pre-Installed","text":"<p>Neovim and Vim come with several built-in colorschemes. These are fairly minimal compared to custom themes but are reliable for basic color support. Here\u2019s a list of the default colorschemes:</p> <ul> <li>default: The standard colorscheme if no other is specified.</li> <li>delek: A bright and readable scheme, often with green and blue tones.</li> <li>desert: A dark, low-contrast scheme, easy on the eyes.</li> <li>elflord: A high-contrast theme with blue and green highlights.</li> <li>evening: A darker theme with blue-gray tones, great for low-light settings.</li> <li>industry: A blue and green scheme with high contrast.</li> <li>koehler: A high-contrast, sharp theme with bright yellow highlights.</li> <li>morning: A light theme with pastel colors.</li> <li>murphy: A classic dark theme with muted colors.</li> <li>pablo: A low-contrast, grayish theme, easier on the eyes.</li> <li>peachpuff: A light and pastel-colored theme.</li> <li>ron: A warm, dark scheme with brown and green highlights.</li> <li>shine: A theme with light colors, good for readability.</li> <li>slate: A soft, dark theme with a slight blue tint.</li> <li>torte: A mostly light-colored theme with subtle highlights.</li> </ul>"},{"location":"themes/#externally-added","title":"Externally Added","text":"<p>Beyond the built-in options, GarudaNvim brings additional color-rich themes that enhance the visual experience. Here\u2019s a selection of popular externally added themes:</p> <ul> <li>OneDarkPro: Vibrant, professional, and easy on the eyes.</li> <li>Dracula: Dark with purple-pink highlights, gentle on eyes.</li> <li>Nordic: Cool blues and grays, minimalist vibe.</li> <li>Tokyonight: Inspired by Tokyo\u2019s nightlife, moody and dark.</li> <li>Tokyodark: Deep blacks and blues, high contrast.</li> <li>Catppuccin: Warm pastels, cozy and relaxing.</li> <li>Nightfox: Dark themes with harmonious color accents. </li> </ul>"},{"location":"themes/#switching-themes","title":"Switching Themes","text":"<p>Ah, the joy of theme-switching \u2013 like picking out a new outfit for your code! For the best experience, we highly recommend using the custom keymap that makes it effortless to try out different themes and get a live preview, all with a few taps.</p>"},{"location":"themes/#garudanvim-way","title":"GarudaNvim Way","text":"<p>To switch themes instantly, just hit: <pre><code>&lt;space&gt; + z + t\n</code></pre> Your <code>which-key</code> setup has this mapped beautifully, so go ahead and tap away to preview themes on the fly! Why use this? Because it\u2019s more satisfying than typing commands like it\u2019s the 90s. Plus, who doesn\u2019t love a shortcut? </p> OR"},{"location":"themes/#the-traditional-way","title":"The Traditional Way","text":"<p>Still a fan of the classics? You can switch themes the old-school way with this command:</p> <pre><code>:colorscheme &lt;scheme-name&gt;\n</code></pre> <p>Simply replace <code>&lt;scheme-name&gt;</code> with the name of your desired theme, like <code>:colorscheme desert</code>.</p> <p>Pro Tip: Remember, a good theme isn\u2019t just for looks \u2013 it\u2019s a vibe. Choose what suits you best!</p>"},{"location":"themes/#customizing-themes","title":"Customizing Themes","text":"<p>To tweak an existing theme, modify the respective configuration file at: <pre><code>~/.config/nvim/lua/garudanvim/plugin_config/color_config/\n</code></pre></p> <p>In this file, you can change colors, contrasts, and more to match your preference.</p> \u2b05\ufe0f Previous Which-Key Next Releases \u27a1\ufe0f"},{"location":"whichkey/","title":"Which-Key","text":"Which-Key Keybindings <p>Welcome to the secret stash of keybindings that revolve around everyone's favorite key\u2014the space key! If you thought the keymaps file was all there is to GarudaNvim\u2019s superpowers, well, think again.</p> <p>This is the page where we take the humble <code>space</code> key and transform it into your personal coding Swiss Army Knife. The creator decided that there\u2019s so much the space key can do, it deserved a page all to itself. So, here we are\u2014another chapter in the saga of making your life as a coder easier, one keybinding at a time. Yes, you\u2019ll need some patience to explore all the hidden gems, but hey, it\u2019s way more satisfying than scrolling through endless Stack Overflow posts (you know it\u2019s true).  </p> <p>Take a deep breath, grab your coffee, and dive in\u2014each keybinding has been placed with the precision of a seasoned developer trying to avoid a merge conflict. You might not even realize how badly you needed these shortcuts until you try them. Seriously, give them a shot. And don\u2019t worry, the space key isn\u2019t overloaded like your browser\u2019s open tabs. It\u2019s just filled with shortcuts that will make you wonder how you ever coded without them.</p>"},{"location":"whichkey/#keybindings-list","title":"Keybindings List","text":""},{"location":"whichkey/#general-shortcuts","title":"General Shortcuts","text":"<ul> <li><code>&lt;Space&gt; e</code>: Toggle NvimTree (File Explorer)</li> <li><code>&lt;Space&gt; N</code>: Open a new buffer</li> <li><code>&lt;Space&gt; s</code>: Save the current buffer</li> <li><code>&lt;Space&gt; q</code>: Quit GarudaNvim</li> <li><code>&lt;Space&gt; w</code>: Close the current buffer</li> <li><code>&lt;Space&gt; f</code>: Find files using Telescope</li> <li><code>&lt;Space&gt; p</code>: Open recent projects</li> <li><code>&lt;Space&gt; t</code>: Open a floating terminal</li> </ul>"},{"location":"whichkey/#diagnostics","title":"Diagnostics","text":"<ul> <li><code>&lt;Space&gt; d b</code>: Show buffer diagnostics</li> <li><code>&lt;Space&gt; d p</code>: Show workspace diagnostics</li> </ul>"},{"location":"whichkey/#find-files-and-more","title":"Find Files and More","text":"<ul> <li><code>&lt;Space&gt; F a</code>: Find all files (including hidden and no-ignore files)</li> <li><code>&lt;Space&gt; F l</code>: Find text in files</li> <li><code>&lt;Space&gt; F b</code>: Find buffers</li> <li><code>&lt;Space&gt; F h</code>: Open help page</li> <li><code>&lt;Space&gt; F o</code>: Find old files</li> <li><code>&lt;Space&gt; F k</code>: Find file types</li> <li><code>&lt;Space&gt; F c</code>: Find text in the current buffer</li> </ul>"},{"location":"whichkey/#terminals","title":"Terminals","text":"<ul> <li><code>&lt;Space&gt; T n</code>: Open Node terminal</li> <li><code>&lt;Space&gt; T t</code>: Open Htop</li> <li><code>&lt;Space&gt; T p</code>: Open Python terminal</li> <li><code>&lt;Space&gt; T h</code>: Open horizontal terminal</li> <li><code>&lt;Space&gt; T v</code>: Open vertical terminal</li> </ul>"},{"location":"whichkey/#git-shortcuts","title":"Git Shortcuts","text":"<ul> <li><code>&lt;Space&gt; g s</code>: Show git status</li> <li><code>&lt;Space&gt; g b</code>: Show git branches</li> <li><code>&lt;Space&gt; g c</code>: Show git commits</li> <li><code>&lt;Space&gt; g f</code>: Show git files</li> <li><code>&lt;Space&gt; g h</code>: Show git stash</li> <li><code>&lt;Space&gt; g g</code>: Open Lazygit</li> <li><code>&lt;Space&gt; g j</code>: Move to the next git hunk</li> <li><code>&lt;Space&gt; g v</code>: Move to the previous git hunk</li> <li><code>&lt;Space&gt; g l</code>: Blame current line</li> <li><code>&lt;Space&gt; g p</code>: Preview the current hunk</li> <li><code>&lt;Space&gt; g r</code>: Reset the current hunk</li> <li><code>&lt;Space&gt; g R</code>: Reset the entire buffer</li> <li><code>&lt;Space&gt; g k</code>: Stage the current hunk</li> <li><code>&lt;Space&gt; g d</code>: Show diff of the current buffer with HEAD</li> <li><code>&lt;Space&gt; g u</code>: Undo the stage of the current hunk</li> </ul>"},{"location":"whichkey/#buffer-management-barbar-plugin","title":"Buffer Management (Barbar Plugin)","text":"<ul> <li><code>&lt;Space&gt; B f</code>: Move to the first buffer</li> <li><code>&lt;Space&gt; B l</code>: Move to the last buffer</li> <li><code>&lt;Space&gt; B p</code>: Pin/Unpin the buffer</li> <li><code>&lt;Space&gt; B t</code>: Restore the last closed buffer</li> <li><code>&lt;Space&gt; B s</code>: Move buffer to start</li> <li><code>&lt;Space&gt; B i</code>: Pick a buffer</li> <li><code>&lt;Space&gt; B d</code>: Delete a picked buffer</li> <li><code>&lt;Space&gt; B c</code>: Close all buffers except the current one</li> <li><code>&lt;Space&gt; B o n</code>: Order buffers by buffer number</li> <li><code>&lt;Space&gt; B o d</code>: Order buffers by directory</li> <li><code>&lt;Space&gt; B o l</code>: Order buffers by language</li> <li><code>&lt;Space&gt; B o w</code>: Order buffers by window number</li> </ul>"},{"location":"whichkey/#updateinstall-plugins-and-language-extensions","title":"Update/Install Plugins and Language Extensions","text":"<ul> <li><code>&lt;Space&gt; u l s</code>: Sync plugins (Lazy Plugin Manager)</li> <li><code>&lt;Space&gt; u l k</code>: Check for plugin updates</li> <li><code>&lt;Space&gt; u l h</code>: Open Lazy plugin help</li> <li><code>&lt;Space&gt; u l c</code>: Clean unused plugins</li> <li><code>&lt;Space&gt; u l e</code>: Check Lazy health</li> <li><code>&lt;Space&gt; u l l</code>: Show Lazy logs</li> <li><code>&lt;Space&gt; u l u</code>: Update plugins</li> <li><code>&lt;Space&gt; u l r</code>: Reload plugins</li> </ul>"},{"location":"whichkey/#setup-related-shortcuts","title":"Setup Related Shortcuts","text":"<ul> <li><code>&lt;Space&gt; z t</code>: Switch colorschemes using Telescope</li> <li><code>&lt;Space&gt; z h</code>: Check GarudaNvim health</li> </ul>"},{"location":"whichkey/#additional-notes-from-the-which-key-setup","title":"Additional Notes from the Which-Key Setup","text":"<p>The Which-Key plugin has been configured to provide a clear and helpful interface for key mappings, enhancing productivity with the following features:</p> <ul> <li>Marks and Registers: Which-Key shows marks and registers (<code>'</code> and <code>\"</code>) to make navigation and clipboard use more convenient.</li> <li>Spelling Suggestions: When pressing <code>z=</code>, Which-Key suggests up to 20 spelling corrections.</li> <li>Default Keybinding Help: It provides help for a variety of default Neovim keybindings such as operators (<code>d</code>, <code>y</code>, etc.), motions, and text objects.</li> <li>Window Management: Native bindings for managing windows (e.g., <code>&lt;c-w&gt;</code> for window control) are included in the help display.</li> </ul> <p>The setup also includes scroll mapping (<code>&lt;c-d&gt;</code> to scroll down, <code>&lt;c-u&gt;</code> to scroll up), customizable window borders (<code>rounded</code> in this case), and the ability to ignore boilerplate commands (<code>&lt;cmd&gt;</code>, <code>lua</code>, etc.) to keep the interface clean.</p> <p>This should provide a complete overview of your keybindings and additional details from your <code>which-key</code> configuration in a Markdown-friendly format.</p> \u2b05\ufe0f Previous Keymaps Next Themes \u27a1\ufe0f"}]}